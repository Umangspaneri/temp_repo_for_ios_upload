name: Build & Upload iOS App

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: macos-14

    steps:
      # 1. Checkout Code
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Setup Flutter (use latest stable or specific version)
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.35.3'   # ✅ stable version with Dart >= 3.8
          channel: 'stable'

      # 3. Debug Flutter & Dart Versions
      - name: Check Flutter & Dart
        run: |
          flutter --version
          dart --version

      # 4. Install Dependencies
      - name: Install dependencies
        run: |
          flutter pub get --verbose    # ✅ verbose logs for dependency solving
          gem install cocoapods --user-install
          export PATH="$HOME/.gem/ruby/3.0.0/bin:$PATH"
          pod repo update
          cd ios
          pod install --repo-update
          cd ..

      # 5. Show pubspec.lock (to debug package resolution)
      - name: Show pubspec.lock
        run: cat pubspec.lock

      # # 6. Install provisioning profile
      # - name: Install provisioning profile
      #   run: |
      #     echo "$IOS_PROV_PROFILE_BASE64" | base64 --decode > profile.mobileprovision
      #     mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
      #     UUID=$(/usr/libexec/PlistBuddy -c "Print :UUID" /dev/stdin <<< $(security cms -D -i profile.mobileprovision))
      #     cp profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/$UUID.mobileprovision

      # # 7. Install signing certificate
      # - name: Install signing certificate
      #   run: |
      #     echo "$IOS_CERT_P12_BASE64" | base64 --decode > cert.p12
      #     security create-keychain -p "" build.keychain
      #     security import cert.p12 -k ~/Library/Keychains/build.keychain -P "$IOS_CERT_PASSWORD" -T /usr/bin/codesign
      #     security list-keychain -d user -s ~/Library/Keychains/build.keychain
      #     security unlock-keychain -p "" ~/Library/Keychains/build.keychain
     
          # 6. Install provisioning profile (robust decoding & validation)
      - name : Decode & install provisioning profile
        shell: bash
        env:
          PROFILE_B64: ${{ secrets.IOS_PROV_PROFILE_BASE64 }}
        run: |
          set -euo pipefail
          echo "Decoding provisioning profile..."

          # Write base64 string to temp file
          printf '%s' "$PROFILE_B64" | tr -d '\r' > /tmp/profile.b64

          # Decode using portable base64 flag
          base64 -d /tmp/profile.b64 > profile.mobileprovision || {
            echo "ERROR: base64 decode failed - check secret format"
            exit 1
          }

          # Inspect decoded file
          file profile.mobileprovision
          head -n 20 profile.mobileprovision

          # Validate size
          SIZE=$(wc -c < profile.mobileprovision || echo 0)
          echo "Decoded provisioning profile size: ${SIZE} bytes"
          if [ "$SIZE" -lt 1000 ]; then
            echo "ERROR: decoded provisioning profile is too small. Likely corrupted."
            exit 1
          fi

          # Parse profile to plist
          security cms -D -i profile.mobileprovision > parsed_profile.plist || {
            echo "ERROR: security cms -D failed to parse profile.mobileprovision"
            exit 1
          }

          # Extract UUID
          UUID=$(/usr/libexec/PlistBuddy -c "Print :UUID" parsed_profile.plist) || {
            echo "ERROR: couldn't extract UUID from parsed_profile.plist"
            cat parsed_profile.plist
            exit 1
          }
          echo "Provisioning profile UUID: $UUID"

          # Install profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/${UUID}.mobileprovision
          echo "Provisioning profile installed to ~/Library/MobileDevice/Provisioning Profiles/${UUID}.mobileprovision"


      # 7. Install signing certificate (p12) and create keychain
      - name: Install signing certificate (.p12)
        shell: bash
        env:
          CERT_B64: ${{ secrets.IOS_CERT_P12_BASE64 }}
          CERT_PASS: ${{ secrets.IOS_CERT_PASSWORD }}
        run: |
          set -euo pipefail
          echo "Decoding certificate..."
          printf '%s' "$CERT_B64" | tr -d '\r' > /tmp/cert.b64
          base64 -D -i /tmp/cert.b64 -o cert.p12 || {
            echo "ERROR: base64 decode for cert failed - check secret"
            exit 1
          }
          ls -l cert.p12

          # Create a temporary keychain for the build and import the cert
          KEYCHAIN=build.keychain
          KEYCHAIN_PASS=""   # empty password
          security create-keychain -p "$KEYCHAIN_PASS" "$KEYCHAIN"
          security set-keychain-settings -t 3600 -u "$KEYCHAIN"
          security unlock-keychain -p "$KEYCHAIN_PASS" "$KEYCHAIN"
          security import cert.p12 -k ~/Library/Keychains/"$KEYCHAIN" -P "$CERT_PASS" -T /usr/bin/codesign -T /usr/bin/security || {
            echo "ERROR: failed to import cert.p12 into keychain"
            exit 1
          }

          # Make the new keychain default for the session
          security list-keychain -d user -s ~/Library/Keychains/"$KEYCHAIN" $(security list-keychain -d user | sed -E 's/^[ \t]+//g' | tr -d '"') || true
          security unlock-keychain -p "$KEYCHAIN_PASS" ~/Library/Keychains/"$KEYCHAIN"
          echo "Certificate imported into keychain: $KEYCHAIN"

          # Show identities to verify import
          security find-identity -p codesigning -v

      # 8. Build Flutter iOS Release
      - name: Build iOS release
        run: flutter build ios --release --no-codesign --verbose   # ✅ verbose build logs

      # 9. Archive IPA
      - name: Archive .ipa
        run: |
          mkdir -p build/ios/ipa
          set -o pipefail
          xcodebuild -workspace ios/Runner.xcworkspace \
            -scheme Runner \
            -configuration Release \
            -sdk iphoneos \
            -archivePath build/ios/Runner.xcarchive archive | tee xcodebuild.log | xcpretty
          xcodebuild -exportArchive \
            -archivePath build/ios/Runner.xcarchive \
            -exportOptionsPlist ios/ExportOptions.plist \
            -exportPath build/ios/ipa | tee xcodeexport.log | xcpretty

      # 10. Upload to TestFlight
      - name: Upload to TestFlight
        run: |
          xcrun altool --upload-app \
            -f build/ios/ipa/Runner.ipa \
            -t ios \
            -u "$APPLE_ID" \
            -p "$APP_SPECIFIC_PASSWORD"

      # 11. Upload build logs for debugging
      - name: Upload build logs
        uses: actions/upload-artifact@v4
        with:
          name: ios-build-logs
          path: |
            xcodebuild.log
            xcodeexport.log

      # 12. Upload IPA artifact (optional)
      - name: Upload IPA artifact
        uses: actions/upload-artifact@v4
        with:
          name: eqb_ltd-iOS
          path: build/ios/ipa
