name: Build & Upload iOS App

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: macos-14

    steps:
      # 1. Checkout Code
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Setup Flutter (use latest stable or specific version)
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.5'   # ✅ stable version with Dart >= 3.8
          channel: 'stable'

      # 3. Debug Flutter & Dart Versions
      - name: Check Flutter & Dart
        run: |
          flutter --version
          dart --version

      # 4. Install Dependencies
      - name: Install dependencies
        run: |
          flutter pub get --verbose    # ✅ verbose logs for dependency solving
          gem install cocoapods --user-install
          export PATH="$HOME/.gem/ruby/3.0.0/bin:$PATH"
          pod repo update
          cd ios
          pod install --repo-update
          cd ..

      # 5. Show pubspec.lock (to debug package resolution)
      - name: Show pubspec.lock
        run: cat pubspec.lock

      # 6. Install provisioning profile
      - name: Install provisioning profile
        run: |
          echo "$IOS_PROV_PROFILE_BASE64" | base64 --decode > profile.mobileprovision
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          UUID=$(/usr/libexec/PlistBuddy -c "Print :UUID" /dev/stdin <<< $(security cms -D -i profile.mobileprovision))
          cp profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/$UUID.mobileprovision

      # 7. Install signing certificate
      - name: Install signing certificate
        run: |
          echo "$IOS_CERT_P12_BASE64" | base64 --decode > cert.p12
          security create-keychain -p "" build.keychain
          security import cert.p12 -k ~/Library/Keychains/build.keychain -P "$IOS_CERT_PASSWORD" -T /usr/bin/codesign
          security list-keychain -d user -s ~/Library/Keychains/build.keychain
          security unlock-keychain -p "" ~/Library/Keychains/build.keychain

      # 8. Build Flutter iOS Release
      - name: Build iOS release
        run: flutter build ios --release --no-codesign --verbose   # ✅ verbose build logs

      # 9. Archive IPA
      - name: Archive .ipa
        run: |
          mkdir -p build/ios/ipa
          set -o pipefail
          xcodebuild -workspace ios/Runner.xcworkspace \
            -scheme Runner \
            -configuration Release \
            -sdk iphoneos \
            -archivePath build/ios/Runner.xcarchive archive | tee xcodebuild.log | xcpretty
          xcodebuild -exportArchive \
            -archivePath build/ios/Runner.xcarchive \
            -exportOptionsPlist ios/ExportOptions.plist \
            -exportPath build/ios/ipa | tee xcodeexport.log | xcpretty

      # 10. Upload to TestFlight
      - name: Upload to TestFlight
        run: |
          xcrun altool --upload-app \
            -f build/ios/ipa/Runner.ipa \
            -t ios \
            -u "$APPLE_ID" \
            -p "$APP_SPECIFIC_PASSWORD"

      # 11. Upload build logs for debugging
      - name: Upload build logs
        uses: actions/upload-artifact@v4
        with:
          name: ios-build-logs
          path: |
            xcodebuild.log
            xcodeexport.log

      # 12. Upload IPA artifact (optional)
      - name: Upload IPA artifact
        uses: actions/upload-artifact@v4
        with:
          name: eqb_ltd-iOS
          path: build/ios/ipa
