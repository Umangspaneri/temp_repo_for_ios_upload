name: Build & Upload iOS App

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-14
    timeout-minutes: 120

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.35.3'
          channel: 'stable'

      - name: Check Flutter & Dart versions
        run: |
          flutter --version
          dart --version

      - name: Install dependencies (pub get + CocoaPods)
        run: |
          set -euo pipefail
          flutter pub get --verbose 2>&1 | tee pubget.log
          tail -n200 pubget.log || true
          gem install cocoapods --user-install
          export PATH="$HOME/.gem/ruby/3.0.0/bin:$PATH"
          cd ios
          pod install --repo-update --silent
          cd ..

      - name: Upload pubget log
        uses: actions/upload-artifact@v4
        with:
          name: pubget-log
          path: pubget.log

      - name: Install Provisioning Profile
        id: install_prov
        shell: bash
        run: |
          set -euo pipefail

          PROFILE_FILE="certs/Rentedpide_AppStore_2125.mobileprovision"
          if [ ! -f "$PROFILE_FILE" ]; then
            echo "::error::Provisioning profile not found at $PROFILE_FILE"
            exit 1
          fi

          # Decode and read plist
          security cms -D -i "$PROFILE_FILE" > profile.plist
          UUID=$(/usr/libexec/PlistBuddy -c "Print :UUID" profile.plist)
          NAME=$(/usr/libexec/PlistBuddy -c "Print :Name" profile.plist)

          # Install into Xcode’s provisioning directory
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp "$PROFILE_FILE" \
             ~/Library/MobileDevice/Provisioning\ Profiles/${UUID}.mobileprovision

          echo "Installed profile UUID=$UUID Name=$NAME"

          # Export outputs for later steps
          echo "prov_uuid=$UUID" >> $GITHUB_OUTPUT
          echo "prov_name=$NAME" >> $GITHUB_OUTPUT

      - name: Install signing certificate (.p12)
        shell: bash
        env:
          CERT_PASS: ${{ secrets.IOS_CERT_PASSWORD }}
        run: |
          set -euo pipefail

          CERT_PATH="certs/Certificates.p12"
          if [ ! -f "$CERT_PATH" ]; then
            echo "::error::Certificate not found at $CERT_PATH"
            exit 1
          fi

          # Create and unlock a dedicated keychain
          security create-keychain -p "" build.keychain-db
          security unlock-keychain -p "" build.keychain-db

          # Import the P12
          security import "$CERT_PATH" \
            -k ~/Library/Keychains/build.keychain-db \
            -P "$CERT_PASS" \
            -T /usr/bin/codesign \
            -T /usr/bin/security

          # Ensure the new keychain is searched first
          security list-keychains -d user -s \
            ~/Library/Keychains/build.keychain-db \
            $(security list-keychains -d user)

          echo "Certificate imported into build.keychain-db"

      - name: Build iOS release (no codesign)
        run: |
          set -euo pipefail
          flutter build ios --release --no-codesign

      - name: Archive & Export .ipa
        shell: bash
        env:
          DEV_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          set -euo pipefail

          echo "Team ID: $DEV_TEAM_ID"
          echo "Using profile: ${{ steps.install_prov.outputs.prov_name }}"

          # Archive with Manual signing and dynamic specifier
          xcodebuild \
            -workspace ios/Runner.xcworkspace \
            -scheme Runner \
            -configuration Release \
            -sdk iphoneos \
            -archivePath build/ios/Runner.xcarchive \
            CODE_SIGN_STYLE=Manual \
            DEVELOPMENT_TEAM="$DEV_TEAM_ID" \
            CODE_SIGN_IDENTITY="iPhone Distribution: Manish Khatri (2YUPR4W35A)" \
            PROVISIONING_PROFILE_SPECIFIER="${{ steps.install_prov.outputs.prov_name }}" \
            archive \
            2>&1 | tee xcodebuild.log || {
              echo "::error::Archive failed. Last 50 lines:"
              tail -n50 xcodebuild.log
              exit 1
            }

          # Export the signed .ipa
          xcodebuild -exportArchive \
            -archivePath build/ios/Runner.xcarchive \
            -exportOptionsPlist ios/ExportOptions.plist \
            -exportPath build/ios/ipa \
            2>&1 | tee xcodeexport.log || {
              echo "::error::Export failed. Last 50 lines:"
              tail -n50 xcodeexport.log
              exit 1
            }

          echo "✅ .ipa ready at build/ios/ipa"

      - name: Upload to TestFlight
        env:
          APPLE_ID:              ${{ secrets.APPLE_ID }}
          APP_SPECIFIC_PASSWORD: ${{ secrets.APP_SPECIFIC_PASSWORD }}
        run: |
          set -euo pipefail
          IPA=$(ls build/ios/ipa/*.ipa | head -n1)
          if [ -z "$IPA" ]; then
            echo "::error::No .ipa found to upload"
            exit 1
          fi
          echo "Uploading $IPA to TestFlight..."
          xcrun altool --upload-app -f "$IPA" -t ios \
            -u "$APPLE_ID" -p "$APP_SPECIFIC_PASSWORD"

      - name: Upload logs & artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ios-build
          path: |
            pubget.log
            xcodebuild.log
            xcodeexport.log
            build/ios/ipa/*.ipa
