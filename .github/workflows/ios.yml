name: Build & Upload iOS App

on:
  push:
    branches:
      - main
  workflow_dispatch:
       
jobs:
  build:
    runs-on: macos-14
    timeout-minutes: 120

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.35.3'
        channel: 'stable'

    - name: Check Flutter & Dart versions
      run: |
        flutter --version
        dart --version

    - name: Install dependencies (pub get + CocoaPods)
      run: |
        set -euo pipefail
        flutter pub get --verbose 2>&1 | tee pubget.log
        tail -n 200 pubget.log || true
        gem install cocoapods --user-install
        export PATH="$HOME/.gem/ruby/3.0.0/bin:$PATH"
        pod repo update --silent || true
        cd ios
        pod install --repo-update --verbose
        cd ..

    - name: Upload pubget log
      uses: actions/upload-artifact@v4
      with:
        name: pubget-log
        path: pubget.log

    - name: Decode & install provisioning profile
      shell: bash
      env:
        PROFILE_B64: ${{ secrets.IOS_PROV_PROFILE_BASE64 }}
      run: |
        set -euo pipefail
        echo "üîç Decoding provisioning profile..."
        printf '%s' "$PROFILE_B64" | tr -d '\r' > /tmp/profile.b64

        if base64 --decode /tmp/profile.b64 > profile.mobileprovision 2>/dev/null; then
          echo "‚úÖ Decoded with --decode"
        elif base64 -D /tmp/profile.b64 > profile.mobileprovision 2>/dev/null; then
          echo "‚úÖ Decoded with -D"
        else
          echo "::error::‚ùå base64 decode failed. Check IOS_PROV_PROFILE_BASE64 secret format."
          head -c 120 /tmp/profile.b64 || true
          exit 1
        fi

        if security cms -D -i profile.mobileprovision > parsed_profile.plist; then
          echo "‚úÖ Parsed provisioning profile"
        else
          echo "::error::‚ùå Failed to parse provisioning profile. File may be corrupted."
          exit 1
        fi

        if UUID=$(/usr/libexec/PlistBuddy -c "Print :UUID" parsed_profile.plist); then
          echo "‚úÖ Extracted UUID: $UUID"
        else
          echo "::error::‚ùå Failed to extract UUID from parsed profile."
          exit 1
        fi

        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/${UUID}.mobileprovision
        echo "‚úÖ Installed provisioning profile as ${UUID}.mobileprovision"

    - name: Install signing certificate (.p12)
      shell: bash
      env:
        CERT_B64: ${{ secrets.IOS_CERT_P12_BASE64 }}
        CERT_PASS: ${{ secrets.IOS_CERT_PASSWORD }}
      run: |
        set -euo pipefail
        echo "üîê Installing signing certificate..."
        printf '%s' "$CERT_B64" | tr -d '\r' > /tmp/cert.b64
        base64 --decode /tmp/cert.b64 > cert.p12 || {
          echo "::error::‚ùå Failed to decode certificate. Check IOS_CERT_P12_BASE64."
          exit 1
        }

        KEYCHAIN=build.keychain
        KEYCHAIN_PATH="$HOME/Library/Keychains/$KEYCHAIN-db"
        security create-keychain -p "" "$KEYCHAIN-db"
        security unlock-keychain -p "" "$KEYCHAIN-db"
        security import cert.p12 -k "$KEYCHAIN_PATH" -P "$CERT_PASS" -T /usr/bin/codesign -T /usr/bin/security || {
          echo "::error::‚ùå Failed to import certificate. Check password and certificate validity."
          exit 1
        }

        security list-keychains -d user -s "$KEYCHAIN_PATH" $(security list-keychains -d user | sed -E 's/^[ \t]+//g' | tr -d '"')
        echo "‚úÖ Certificate imported into keychain"

    - name: Build iOS release
      run: |
        set -euo pipefail
        echo "üöß Building iOS release..."
        flutter build ios --release --no-codesign --verbose 2>&1 | tee flutter_build.log
        tail -n 200 flutter_build.log || true

    - name: Archive & Export .ipa
      run: |
        set -euo pipefail
        mkdir -p build/ios/ipa

        echo "üì¶ Archiving app..."
        xcodebuild -workspace ios/Runner.xcworkspace \
          -scheme Runner \
          -configuration Release \
          -sdk iphoneos \
          -archivePath build/ios/Runner.xcarchive archive 2>&1 | tee xcodebuild.log

        echo "üì§ Exporting .ipa..."
        if xcodebuild -exportArchive \
          -archivePath build/ios/Runner.xcarchive \
          -exportOptionsPlist ios/ExportOptions.plist \
          -exportPath build/ios/ipa 2>&1 | tee xcodeexport.log; then
          echo "‚úÖ Export succeeded."
        else
          echo "::error::‚ùå Export failed. Check xcodeexport.log and ExportOptions.plist."
          tail -n 100 xcodeexport.log || true
          exit 1
        fi

        echo "üìÅ Checking contents of build/ios/ipa:"
        ls -lh build/ios/ipa || {
          echo "::error::‚ùå Export directory missing or empty."
          exit 1
        }

    - name: Upload to TestFlight
      env:
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APP_SPECIFIC_PASSWORD: ${{ secrets.APP_SPECIFIC_PASSWORD }}
      run: |
        set -euo pipefail
        IPA=$(ls build/ios/ipa/*.ipa 2>/dev/null | head -n1 || true)
        if [ -z "$IPA" ]; then
          echo "::error::‚ùå No .ipa found to upload. Check xcodeexport.log and ExportOptions.plist."
          exit 1
        fi
        echo "üöÄ Uploading $IPA to App Store Connect via altool..."
        xcrun altool --upload-app -f "$IPA" -t ios -u "$APPLE_ID" -p "$APP_SPECIFIC_PASSWORD" || {
          echo "::error::‚ùå Upload failed. Check credentials and provisioning setup."
          exit 1
        }
        echo "‚úÖ Upload to TestFlight succeeded."

    - name: Upload logs
      uses: actions/upload-artifact@v4
      with:
        name: ios-build-logs
        path: |
          pubget.log
          flutter_build.log
          xcodebuild.log
          xcodeexport.log

    - name: Upload IPA artifact
      uses: actions/upload-artifact@v4
      with:
        name: eqb_ltd-iOS
        path: build/ios/ipa
