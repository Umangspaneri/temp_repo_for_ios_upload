# name: Build & Upload iOS App

# on:
#   push:
#     branches:
#       - main
#   workflow_dispatch:

# jobs:
#   build:
#     runs-on: macos-14
#     timeout-minutes: 120

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       - name: Setup Flutter
#         uses: subosito/flutter-action@v2
#         with:
#           flutter-version: '3.35.3'
#           channel: 'stable'

#       - name: Check Flutter & Dart versions
#         run: |
#           flutter --version
#           dart --version

#       - name: Install dependencies (pub get + CocoaPods)
#         run: |
#           set -euo pipefail
#           flutter pub get --verbose 2>&1 | tee pubget.log
#           tail -n 200 pubget.log || true
#           gem install cocoapods --user-install
#           export PATH="$HOME/.gem/ruby/3.0.0/bin:$PATH"
#           pod repo update --silent || true
#           cd ios
#           pod install --repo-update --verbose
#           cd ..

#       - name: Upload pubget log
#         uses: actions/upload-artifact@v4
#         with:
#           name: pubget-log
#           path: pubget.log

#       - name: Install Provisioning Profile
#         shell: bash
#         run: |
#           set -euo pipefail
#           echo "üì• Installing provisioning profile from certs/Rentpedia_AppStore_2025.mobileprovision"
#           PROFILE_PATH="certs/Rentpedia_AppStore_2025.mobileprovision"
#           UUID="b31c0c80-bda3-44f2-acef-b6267c06b28f"
#           if [ -f "$PROFILE_PATH" ]; then
#             mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
#             cp "$PROFILE_PATH" ~/Library/MobileDevice/Provisioning\ Profiles/${UUID}.mobileprovision
#             echo "‚úÖ Installed provisioning profile as ${UUID}.mobileprovision"
#           else
#             echo "::error::‚ùå Provisioning profile not found at $PROFILE_PATH"
#             echo "::error:: Known issue: file missing or mis-named in certs/ directory"
#             exit 1
#           fi

#       - name: Install signing certificate (.p12)
#         shell: bash
#         env:
#           CERT_PASS: ${{ secrets.IOS_CERT_PASSWORD }}
#         run: |
#           set -euo pipefail
#           echo "üîê Installing signing certificate from certs/Certificates.p12"

#           CERT_PATH="certs/Certificates.p12"
#           if [ ! -f "$CERT_PATH" ]; then
#             echo "::error::‚ùå Certificate file not found at $CERT_PATH"
#             echo "::error:: Known issue: mis-named or missing file in certs/ directory"
#             exit 1
#           fi

#           KEYCHAIN=build.keychain
#           KEYCHAIN_PATH="$HOME/Library/Keychains/$KEYCHAIN-db"

#           # create & unlock a temporary keychain
#           security create-keychain -p "" "$KEYCHAIN-db"
#           security unlock-keychain -p "" "$KEYCHAIN-db"

#           # import the .p12 directly‚Äîno base64, no decoding
#           security import "$CERT_PATH" \
#             -k "$KEYCHAIN_PATH" \
#             -P "$CERT_PASS" \
#             -T /usr/bin/codesign \
#             -T /usr/bin/security || {
#               echo "::error::‚ùå Failed to import certificate. Known issue: wrong password or corrupted .p12 file"
#               exit 1
#             }

#           # make sure our keychain is first in the search list
#           security list-keychains -d user -s \
#             "$KEYCHAIN_PATH" \
#             $(security list-keychains -d user \
#               | sed -E 's/^[[:space:]]+//g' \
#               | tr -d '"')

#           echo "‚úÖ Certificate imported into keychain"


#       - name: Build iOS release
#         run: |
#           set -euo pipefail
#           echo "üöß Building iOS release..."
#           flutter build ios --release --no-codesign --verbose 2>&1 | tee flutter_build.log
#           tail -n 200 flutter_build.log || true

#       - name: Archive & Export .ipa
#         run: |
#           set -euo pipefail
#           mkdir -p build/ios/ipa

#           echo "üì¶ Archiving app..."
#           xcodebuild -workspace ios/Runner.xcworkspace \
#             -scheme Runner \
#             -configuration Release \
#             -sdk iphoneos \
#             -archivePath build/ios/Runner.xcarchive archive 2>&1 | tee xcodebuild.log || {
#             echo "::error::‚ùå Archive failed. Known issue: Check scheme/project name or signing settings"
#             exit 1
#           }

#           echo "üì§ Exporting .ipa..."
#           if xcodebuild -exportArchive \
#             -archivePath build/ios/Runner.xcarchive \
#             -exportOptionsPlist ios/ExportOptions.plist \
#             -exportPath build/ios/ipa 2>&1 | tee xcodeexport.log; then
#             echo "‚úÖ Export succeeded."
#           else
#             echo "::error::‚ùå Export failed. Known issue: Validate ExportOptions.plist and provisioning-profile compatibility"
#             tail -n 100 xcodeexport.log || true
#             exit 1
#           fi

#           echo "üìÅ Checking contents of build/ios/ipa:"
#           ls -lh build/ios/ipa || {
#             echo "::error::‚ùå Export directory missing or empty. Known issue: ExportArchive might have failed"
#             exit 1
#           }

#       - name: Upload to TestFlight
#         env:
#           APPLE_ID: ${{ secrets.APPLE_ID }}
#           APP_SPECIFIC_PASSWORD: ${{ secrets.APP_SPECIFIC_PASSWORD }}
#         run: |
#           set -euo pipefail
#           IPA=$(ls build/ios/ipa/*.ipa 2>/dev/null | head -n1 || true)
#           if [ -z "$IPA" ]; then
#             echo "::error::‚ùå No .ipa found to upload. Known issue: Check xcodeexport.log for errors"
#             exit 1
#           fi
#           echo "üöÄ Uploading $IPA to App Store Connect via altool..."
#           xcrun altool --upload-app -f "$IPA" -t ios \
#             -u "$APPLE_ID" -p "$APP_SPECIFIC_PASSWORD" || {
#             echo "::error::‚ùå Upload failed. Known issue: Invalid App Store Connect credentials or network issue"
#             exit 1
#           }
#           echo "‚úÖ Upload to TestFlight succeeded"

#       - name: Upload logs
#         uses: actions/upload-artifact@v4
#         with:
#           name: ios-build-logs
#           path: |
#             pubget.log
#             flutter_build.log
#             xcodebuild.log
#             xcodeexport.log

#       - name: Upload IPA artifact
#         uses: actions/upload-artifact@v4
#         with:
#           name: eqb_ltd-iOS
#           path: build/ios/ipa

name: Build & Upload iOS App

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-14
    timeout-minutes: 120

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.35.3'
          channel: 'stable'

      - name: Check Flutter & Dart versions
        run: |
          flutter --version
          dart --version

      - name: Install dependencies (pub get + CocoaPods)
        run: |
          set -euo pipefail
          flutter pub get --verbose 2>&1 | tee pubget.log
          tail -n 200 pubget.log || true
          gem install cocoapods --user-install
          export PATH="$HOME/.gem/ruby/3.0.0/bin:$PATH"
          pod repo update --silent || true
          cd ios
          pod install --repo-update --verbose
          cd ..

      - name: Upload pubget log
        uses: actions/upload-artifact@v4
        with:
          name: pubget-log
          path: pubget.log

      - name: Install Provisioning Profile
        id: install_prov
        shell: bash
        run: |
          set -euo pipefail
          echo "üì• Installing provisioning profile"
          PROFILE_PATH="certs/Rentpedia_AppStore_2025.mobileprovision"
          if [ ! -f "$PROFILE_PATH" ]; then
            echo "::error::‚ùå Provisioning profile not found at $PROFILE_PATH"
            echo "::error:: Known issue: file missing or mis-named in certs/ directory"
            exit 1
          fi

          # parse and extract UUID
          security cms -D -i "$PROFILE_PATH" > parsed_profile.plist
          UUID=$( /usr/libexec/PlistBuddy -c "Print :UUID" parsed_profile.plist )
          echo "‚úÖ UUID=$UUID"

          # install by UUID
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp "$PROFILE_PATH" \
            ~/Library/MobileDevice/Provisioning\ Profiles/${UUID}.mobileprovision
          echo "‚úÖ Installed provisioning profile as ${UUID}.mobileprovision"

          # expose to later steps
          echo "::set-output name=prov_uuid::$UUID"

      - name: Install signing certificate (.p12)
        shell: bash
        env:
          CERT_PASS: ${{ secrets.IOS_CERT_PASSWORD }}
        run: |
          set -euo pipefail
          echo "üîê Installing signing certificate from certs/Certificates.p12"

          CERT_PATH="certs/Certificates.p12"
          if [ ! -f "$CERT_PATH" ]; then
            echo "::error::‚ùå Certificate file not found at $CERT_PATH"
            echo "::error:: Known issue: mis-named or missing file in certs/ directory"
            exit 1
          fi

          KEYCHAIN=build.keychain
          KEYCHAIN_PATH="$HOME/Library/Keychains/$KEYCHAIN-db"

          # create & unlock a temporary keychain
          security create-keychain -p "" "$KEYCHAIN-db"
          security unlock-keychain -p "" "$KEYCHAIN-db"

          # import the .p12 directly
          security import "$CERT_PATH" \
            -k "$KEYCHAIN_PATH" \
            -P "$CERT_PASS" \
            -T /usr/bin/codesign \
            -T /usr/bin/security || {
              echo "::error::‚ùå Failed to import certificate. Known issue: wrong password or corrupted .p12"
              exit 1
            }

          # ensure our keychain is first in the search list
          security list-keychains -d user -s \
            "$KEYCHAIN_PATH" \
            $(security list-keychains -d user \
              | sed -E 's/^[[:space:]]+//g' \
              | tr -d '"')
          echo "‚úÖ Certificate imported into keychain"

      - name: Build iOS release
        run: |
          set -euo pipefail
          echo "üöß Building iOS release..."
          flutter build ios --release --no-codesign --verbose 2>&1 | tee flutter_build.log
          tail -n 200 flutter_build.log || true

      - name: Archive & Export .ipa
        shell: bash
        env:
          DEV_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          set -euo pipefail
          mkdir -p build/ios/ipa

          echo "üì¶ Archiving app‚Ä¶"
          PROV_PROFILE=${{ steps.install_prov.outputs.prov_uuid }}
          SIGNING_IDENTITY=$(
            security find-identity -v -p codesigning \
              | awk -F\" '/iPhone Distribution/ {print $2; exit}'
          )
          echo "‚öôÔ∏è Using identity: $SIGNING_IDENTITY"

          xcodebuild \
            -workspace ios/Runner.xcworkspace \
            -scheme Runner \
            -configuration Release \
            -sdk iphoneos \
            -archivePath build/ios/Runner.xcarchive \
            CODE_SIGN_STYLE=Manual \
            DEVELOPMENT_TEAM="$DEV_TEAM_ID" \
            CODE_SIGN_IDENTITY="$SIGNING_IDENTITY" \
            PROVISIONING_PROFILE="$PROV_PROFILE" \
            archive 2>&1 | tee xcodebuild.log || {
              echo "::error::‚ùå Archive failed. Known issue: check TEAM_ID, PROFILE_UUID, identity"
              exit 1
            }

          echo "üì§ Exporting .ipa‚Ä¶"
          xcodebuild -exportArchive \
            -archivePath build/ios/Runner.xcarchive \
            -exportOptionsPlist ios/ExportOptions.plist \
            -exportPath build/ios/ipa \
            2>&1 | tee xcodeexport.log || {
              echo "::error::‚ùå Export failed. Known issue: validate ExportOptions.plist"
              exit 1
            }

          echo "üìÅ Checking contents of build/ios/ipa:"
          ls -lh build/ios/ipa || {
            echo "::error::‚ùå Export directory missing or empty. Known issue: ExportArchive might have failed"
            exit 1
          }

      - name: Upload to TestFlight
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APP_SPECIFIC_PASSWORD: ${{ secrets.APP_SPECIFIC_PASSWORD }}
        run: |
          set -euo pipefail
          IPA=$(ls build/ios/ipa/*.ipa 2>/dev/null | head -n1 || true)
          if [ -z "$IPA" ]; then
            echo "::error::‚ùå No .ipa found to upload. Known issue: Check xcodeexport.log for errors"
            exit 1
          fi
          echo "üöÄ Uploading $IPA to App Store Connect via altool..."
          xcrun altool --upload-app -f "$IPA" -t ios \
            -u "$APPLE_ID" -p "$APP_SPECIFIC_PASSWORD" || {
            echo "::error::‚ùå Upload failed. Known issue: Invalid App Store Connect credentials or network issue"
            exit 1
          }
          echo "‚úÖ Upload to TestFlight succeeded"

      - name: Upload logs
        uses: actions/upload-artifact@v4
        with:
          name: ios-build-logs
          path: |
            pubget.log
            flutter_build.log
            xcodebuild.log
            xcodeexport.log

      - name: Upload IPA artifact
        uses: actions/upload-artifact@v4
        with:
          name: eqb_ltd-iOS
          path: build/ios/ipa
