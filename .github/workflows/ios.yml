name: Build & Upload iOS App

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-14
    timeout-minutes: 120

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.35.3'
          channel: 'stable'

      - name: Check Flutter & Dart versions
        run: |
          flutter --version
          dart --version

      - name: Install dependencies (pub get + CocoaPods)
        run: |
          set -euo pipefail
          flutter pub get --verbose 2>&1 | tee pubget.log
          tail -n 200 pubget.log || true
          gem install cocoapods --user-install
          export PATH="$HOME/.gem/ruby/3.0.0/bin:$PATH"
          pod repo update --silent || true
          cd ios
          pod install --repo-update --verbose
          cd ..

      - name: Upload pubget log
        uses: actions/upload-artifact@v4
        with:
          name: pubget-log
          path: pubget.log

      - name: Install Provisioning Profile
        id: install_prov
        shell: bash
        run: |
          set -euo pipefail
          echo "üì• Installing provisioning profile"
          PROFILE_PATH="certs/Rentpedia_AppStore_2025.mobileprovision"
          if [ ! -f "$PROFILE_PATH" ]; then
            echo "::error::‚ùå Provisioning profile not found at $PROFILE_PATH"
            exit 1
          fi
          security cms -D -i "$PROFILE_PATH" > profile.plist
          UUID=$(/usr/libexec/PlistBuddy -c "Print :UUID" profile.plist)
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp "$PROFILE_PATH" \
             ~/Library/MobileDevice/Provisioning\ Profiles/${UUID}.mobileprovision
          echo "‚úÖ Installed provisioning profile as ${UUID}.mobileprovision"
          echo "::set-output name=prov_uuid::$UUID"

      - name: Install signing certificate (.p12)
        shell: bash
        env:
          CERT_PASS: ${{ secrets.IOS_CERT_PASSWORD }}
        run: |
          set -euo pipefail
          echo "üîê Importing certs/Certificates.p12"
          CERT_PATH="certs/Certificates.p12"
          if [ ! -f "$CERT_PATH" ]; then
            echo "::error::‚ùå Certificate not found at $CERT_PATH"
            exit 1
          fi
          security create-keychain -p "" build.keychain-db
          security unlock-keychain -p "" build.keychain-db
          security import "$CERT_PATH" \
            -k ~/Library/Keychains/build.keychain-db \
            -P "$CERT_PASS" \
            -T /usr/bin/codesign \
            -T /usr/bin/security
          security list-keychains -d user -s \
            ~/Library/Keychains/build.keychain-db \
            $(security list-keychains -d user)
          echo "‚úÖ Certificate imported into keychain"

      - name: Build iOS release
        run: |
          set -euo pipefail
          echo "üöß Building iOS release..."
          flutter build ios --release --no-codesign --verbose 2>&1 | tee flutter_build.log
          if [ "${PIPESTATUS[0]}" -ne 0 ]; then
            echo "::error::‚ùå Flutter build failed. Last 50 lines:"
            tail -n50 flutter_build.log
            exit 1
          fi

      - name: Archive & Export .ipa
        shell: bash
        env:
          DEV_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          PROV_UUID:   ${{ steps.install_prov.outputs.prov_uuid }}
        run: |
          set -euo pipefail

          echo "üîé DEBUG: TEAM_ID=$DEV_TEAM_ID"
          echo "üîé DEBUG: PROFILE_UUID=$PROV_UUID"

          echo "üì¶ Archiving‚Ä¶"
          xcodebuild \
            -workspace ios/Runner.xcworkspace \
            -scheme Runner \
            -configuration Release \
            -sdk iphoneos \
            -archivePath build/ios/Runner.xcarchive \
            CODE_SIGN_STYLE=Manual \
            DEVELOPMENT_TEAM="$DEV_TEAM_ID" \
            CODE_SIGN_IDENTITY="iPhone Distribution" \
            PROVISIONING_PROFILE="$PROV_UUID" \
            archive \
            2>&1 | tee xcodebuild.log || {
              echo "::error::‚ùå Archive failed. Last 50 lines of xcodebuild.log:"
              tail -n50 xcodebuild.log
              exit 1
            }

          echo "üì§ Exporting .ipa‚Ä¶"
          xcodebuild -exportArchive \
            -archivePath build/ios/Runner.xcarchive \
            -exportOptionsPlist ios/ExportOptions.plist \
            -exportPath build/ios/ipa \
            2>&1 | tee xcodeexport.log || {
              echo "::error::‚ùå Export failed. Last 50 lines of xcodeexport.log:"
              tail -n50 xcodeexport.log
              exit 1
            }

          echo "‚úÖ .ipa ready at build/ios/ipa"

      - name: Upload to TestFlight
        env:
          APPLE_ID:              ${{ secrets.APPLE_ID }}
          APP_SPECIFIC_PASSWORD: ${{ secrets.APP_SPECIFIC_PASSWORD }}
        run: |
          set -euo pipefail
          IPA=$(ls build/ios/ipa/*.ipa 2>/dev/null | head -n1)
          if [ -z "$IPA" ]; then
            echo "::error::‚ùå No .ipa found to upload"
            exit 1
          fi
          echo "üöÄ Uploading $IPA to App Store Connect via altool..."
          xcrun altool --upload-app -f "$IPA" -t ios \
            -u "$APPLE_ID" -p "$APP_SPECIFIC_PASSWORD" || {
            echo "::error::‚ùå Upload failed"
            exit 1
          }
          echo "‚úÖ Upload to TestFlight succeeded"

      - name: Upload logs
        uses: actions/upload-artifact@v4
        with:
          name: ios-build-logs
          path: |
            pubget.log
            flutter_build.log
            xcodebuild.log
            xcodeexport.log

      - name: Upload IPA artifact
        uses: actions/upload-artifact@v4
        with:
          name: eqb_ltd-iOS
          path: build/ios/ipa
