# name: iOS Build & Upload

# on:
#   push:
#     branches: [ main ]
#   workflow_dispatch:

# jobs:
#   build:
#     runs-on: macos-14
#     timeout-minutes: 60

#     steps:
#       - name: üì• Checkout
#         uses: actions/checkout@v4

#       - name: üê¶ Setup Flutter
#         uses: subosito/flutter-action@v2
#         with:
#           flutter-version: '3.24.3'
#           channel: stable
#           cache: true

#       - name: üì¶ Dependencies
#         run: |
#           echo "üì¶ Installing dependencies..."
#           flutter pub get
#           brew install cocoapods
#           cd ios && pod install && cd ..
#           echo "‚úÖ Dependencies installed"

#       - name: üîß Setup Xcode
#         run: |
#           echo "üîß Setting up Xcode..."
#           sudo xcode-select -s /Applications/Xcode_16.1.app/Contents/Developer
#           echo "‚úÖ Xcode 16.1 selected"

#       - name: üîê Setup Keychain
#         run: |
#           echo "üîê Setting up keychain..."
#           security create-keychain -p "" build-temp.keychain-db
#           security list-keychains -d user -s build-temp.keychain-db login.keychain
#           security default-keychain -s build-temp.keychain-db
#           security unlock-keychain -p "" build-temp.keychain-db
#           echo "Importing Certificates.p12..."
#           security import certs/Certificates.p12 -k ~/Library/Keychains/build-temp.keychain-db -P "${{ secrets.IOS_CERT_PASSWORD }}" -T /usr/bin/codesign -T /usr/bin/security
#           echo "Importing 27DLU45ZHK.p12..."
#           security import certs/27DLU45ZHK.p12 -k ~/Library/Keychains/build-temp.keychain-db -P "${{ secrets.IOS_CERT_PASSWORD }}" -T /usr/bin/codesign -T /usr/bin/security
#           echo "Importing 27DLU45ZHK.cer..."
#           security import certs/27DLU45ZHK.cer -k ~/Library/Keychains/build-temp.keychain-db -T /usr/bin/codesign -T /usr/bin/security
#           security set-key-partition-list -S apple-tool:,apple-tool:,codesign: -s -k "" ~/Library/Keychains/build-temp.keychain-db
#           echo "‚úÖ Keychain setup complete"

#       - name: üìã Get Certificate
#         run: |
#           echo "üìã Finding certificate..."
#           echo "=== All certificates in keychain ==="
#           security find-identity -p codesigning -v ~/Library/Keychains/build-temp.keychain-db
#           CERT=$(security find-identity -p codesigning -v ~/Library/Keychains/build-temp.keychain-db | grep -E "(Distribution|Developer)" | head -n1 | sed -E 's/^[[:space:]]*[0-9]+\) [A-F0-9]+ \"(.+)\".*$/\1/')
#           if [ -z "$CERT" ]; then
#             echo "‚ùå No distribution certificate found!"
#             echo "Available certificates:"
#             security find-identity -p codesigning -v ~/Library/Keychains/build-temp.keychain-db
#             exit 1
#           fi
#           echo "CODE_SIGN_IDENTITY=$CERT" >> $GITHUB_ENV
#           echo "‚úÖ Certificate found: $CERT"
#           CERT_HASH=$(security find-identity -p codesigning -v ~/Library/Keychains/build-temp.keychain-db | grep -E "(Distribution|Developer)" | head -n1 | sed -E 's/^[[:space:]]*[0-9]+\) ([A-F0-9]+) \"(.+)\".*$/\1/')
#           echo "CERT_HASH=$CERT_HASH" >> $GITHUB_ENV
#           echo "‚úÖ Certificate hash: $CERT_HASH"

#       - name: üì± Setup Provisioning
#         run: |
#           echo "üì± Setting up provisioning profile..."
#           security cms -D -i certs/Rentpedia_AppStore_2025.mobileprovision > profile.plist
#           UUID=$(plutil -extract UUID raw profile.plist)
#           BUNDLE_ID=$(plutil -extract Entitlements.application-identifier raw profile.plist | sed 's/^[^.]*\.//')
#           echo "PROFILE_UUID=$UUID" >> $GITHUB_ENV
#           echo "BUNDLE_ID=$BUNDLE_ID" >> $GITHUB_ENV
#           mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
#           cp certs/Rentpedia_AppStore_2025.mobileprovision "$HOME/Library/MobileDevice/Provisioning Profiles/${UUID}.mobileprovision"
#           echo "‚úÖ Bundle ID: $BUNDLE_ID"
#           echo "‚úÖ Team ID (from secrets): ${{ secrets.APPLE_TEAM_ID }}" 
#           echo "‚úÖ Profile UUID: $UUID"
#           echo "‚úÖ Provisioning profile setup complete"

#       - name: üìù Create Export Options
#         run: |
#           echo "üìù Creating export options..."
#           cat > ios/ExportOptions.plist << 'EXPORT_EOF'
#           <?xml version="1.0" encoding="UTF-8"?>
#           <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
#           <plist version="1.0">
#           <dict>
#             <key>method</key><string>app-store</string>
#             <key>signingStyle</key><string>manual</string>
#             <key>teamID</key><string>${{ secrets.APPLE_TEAM_ID }}</string>
#             <key>signingCertificate</key><string>${{ env.CODE_SIGN_IDENTITY }}</string>
#             <key>provisioningProfiles</key>
#             <dict>
#               <key>${{ env.BUNDLE_ID }}</key>
#               <string>${{ env.PROFILE_UUID }}</string>
#             </dict>
#             <key>uploadBitcode</key><false/>
#             <key>uploadSymbols</key><true/>
#             <key>compileBitcode</key><false/>
#           </dict>
#           </plist>
#           EXPORT_EOF
#           echo "=== Export Options ==="
#           cat ios/ExportOptions.plist
#           echo "‚úÖ Export options created"

#       - name: üî® Flutter Build
#         run: |
#           echo "üî® Building Flutter app..."
#           flutter build ios --release --no-codesign
#           echo "‚úÖ Flutter build complete"

#       - name: üì¶ Archive
#         run: |
#           echo "üì¶ Creating archive..."
#           echo "Attempting archive with certificate name..."
#           if ! xcodebuild -workspace ios/Runner.xcworkspace \
#             -scheme Runner \
#             -configuration Release \
#             -sdk iphoneos \
#             -archivePath build/ios/archive/Runner.xcarchive \
#             CODE_SIGN_STYLE=Manual \
#             DEVELOPMENT_TEAM="${{ secrets.APPLE_TEAM_ID }}" \
#             CODE_SIGN_IDENTITY="${{ env.CODE_SIGN_IDENTITY }}" \
#             PROVISIONING_PROFILE_SPECIFIER="${{ env.PROFILE_UUID }}" \
#             PRODUCT_BUNDLE_IDENTIFIER="${{ env.BUNDLE_ID }}" \
#             OTHER_CODE_SIGN_FLAGS="--keychain $HOME/Library/Keychains/build-temp.keychain-db" \
#             archive; then
#             echo "Failed with certificate name, trying with hash..."
#             xcodebuild -workspace ios/Runner.xcworkspace \
#               -scheme Runner \
#               -configuration Release \
#               -sdk iphoneos \
#               -archivePath build/ios/archive/Runner.xcarchive \
#               CODE_SIGN_STYLE=Manual \
#               DEVELOPMENT_TEAM="${{ secrets.APPLE_TEAM_ID }}" \
#               CODE_SIGN_IDENTITY="${{ env.CERT_HASH }}" \
#               PROVISIONING_PROFILE_SPECIFIER="${{ env.PROFILE_UUID }}" \
#               PRODUCT_BUNDLE_IDENTIFIER="${{ env.BUNDLE_ID }}" \
#               OTHER_CODE_SIGN_FLAGS="--keychain $HOME/Library/Keychains/build-temp.keychain-db" \
#               archive
#           fi
#           echo "‚úÖ Archive created successfully"

#       - name: üì± Export IPA
#         run: |
#           echo "üì± Exporting IPA..."
#           xcodebuild -exportArchive \
#             -archivePath build/ios/archive/Runner.xcarchive \
#             -exportOptionsPlist ios/ExportOptions.plist \
#             -exportPath build/ios/ipa
#           echo "‚úÖ IPA exported successfully"

#       - name: üöÄ Upload to App Store
#         run: |
#           echo "üöÄ Uploading to App Store..."
#           IPA_FILE=$(find build/ios/ipa -name "*.ipa" | head -n1)
#           xcrun altool --upload-app \
#             --type ios \
#             --file "$IPA_FILE" \
#             --username "${{ secrets.APPLE_ID }}" \
#             --password "${{ secrets.APP_SPECIFIC_PASSWORD }}"
#           echo "üéâ Upload successful! Your app is now processing in App Store Connect."

#       - name: üíæ Save Artifacts (on failure)
#         if: failure()
#         uses: actions/upload-artifact@v4
#         with:
#           name: build-logs
#           path: |
#             build/ios/
#             ios/ExportOptions.plist
name: iOS Upload Only

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths: [ 'certs/Runner.ipa' ]

jobs:
  upload:
    runs-on: macos-14
    timeout-minutes: 15

    steps:
      - name: üì• Checkout
        uses: actions/checkout@v4

      - name: üöÄ Upload IPA to App Store
        run: |
          echo "üöÄ Uploading pre-built IPA to App Store..."
          if [ ! -f "certs/Runner.ipa" ]; then
            echo "‚ùå Runner.ipa not found in certs/ folder"
            echo "Please build locally and commit Runner.ipa to certs/ folder"
            exit 1
          fi
          
          echo "üì± Found IPA file: certs/Runner.ipa"
          ls -la certs/Runner.ipa
          
          echo "üîó Uploading to App Store Connect..."
          xcrun altool --upload-app \
            --type ios \
            --file "certs/Runner.ipa" \
            --username "${{ secrets.APPLE_ID }}" \
            --password "${{ secrets.APP_SPECIFIC_PASSWORD }}"
          
          echo "üéâ Upload successful! Your app is now processing in App Store Connect."
          echo "üìß You'll receive an email when processing is complete."

      - name: üíæ Log Upload Details
        run: |
          echo "=== Upload Summary ==="
          echo "File: certs/Runner.ipa"
          echo "Size: $(ls -lh certs/Runner.ipa | awk '{print $5}')"
          echo "Apple ID: ${{ secrets.APPLE_ID }}"
          echo "Upload completed at: $(date)"
          