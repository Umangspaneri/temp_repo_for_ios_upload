# name: Build & Sign iOS App for App Store

# on:
#   push:
#     branches: [ main ]
#   workflow_dispatch:

# jobs:
#   build:
#     runs-on: macos-14
#     timeout-minutes: 120

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       - name: Setup Flutter
#         uses: subosito/flutter-action@v2
#         with:
#           flutter-version: '3.35.3'
#           channel: stable

#       - name: Select Xcode 16
#         run: |
#           echo "🔄 Selecting Xcode 16..."
#           X16=$(ls /Applications | grep '^Xcode_16' | head -n1)
#           if [ -z "$X16" ]; then
#             echo "::error::❌ Xcode_16 not found"
#             exit 1
#           fi
#           sudo xcode-select -s /Applications/"$X16"/Contents/Developer
#           echo "✅ Using: $(xcode-select -p)"

#       - name: Confirm Xcode version
#         run: xcodebuild -version

#       - name: Check Flutter & Dart versions
#         run: |
#           flutter --version
#           dart --version

#       - name: Install dependencies
#         run: |
#           flutter pub get --verbose 2>&1 | tee pubget.log || {
#             echo "::error::❌ flutter pub get failed"
#             tail -n200 pubget.log
#             exit 1
#           }
#           gem install cocoapods --user-install 2>&1 | tee cocoapods_install.log || {
#             echo "::error::❌ gem install cocoapods failed"
#             tail -n200 cocoapods_install.log
#             exit 1
#           }
#           export PATH="$HOME/.gem/ruby/3.0.0/bin:$PATH"
#           cd ios
#           pod install --repo-update --verbose 2>&1 | tee pod_install.log || {
#             echo "::error::❌ pod install failed"
#             tail -n200 pod_install.log
#             exit 1
#           }
#           cd ..

#       - name: Upload dependency logs
#         uses: actions/upload-artifact@v4
#         with:
#           name: dependency-logs
#           path: |
#             pubget.log
#             cocoapods_install.log
#             ios/pod_install.log

#       - name: Import signing certificate
#         env:
#           CERT_PASS: ${{ secrets.IOS_CERT_PASSWORD }}
#         run: |
#           KEYCHAIN=build-temp.keychain
#           security create-keychain -p "" "$KEYCHAIN"
#           security set-keychain-settings -t 3600 -u "$KEYCHAIN"
#           security unlock-keychain -p "" "$KEYCHAIN"
#           security import certs/Certificates.p12 \
#             -k ~/Library/Keychains/"$KEYCHAIN"-db \
#             -P "$CERT_PASS" \
#             -T /usr/bin/codesign \
#             -T /usr/bin/security \
#           2>&1 | tee security_import.log || {
#             echo "::error::❌ .p12 import failed"
#             tail -n200 security_import.log
#             exit 1
#           }
#           security list-keychains -d user -s ~/Library/Keychains/"$KEYCHAIN"-db $(security list-keychains -d user | tr -d '"') || true

#       - name: Decode and register provisioning profile
#         run: |
#           security cms -D -i certs/Rentpedia_AppStore_2025.mobileprovision > parsed_profile.plist || {
#             echo "::error::❌ Failed to decode provisioning profile"
#             exit 1
#           }
#           PROFILE_UUID=$(plutil -extract UUID raw parsed_profile.plist 2>/dev/null || echo "")
#           if [ -z "$PROFILE_UUID" ]; then
#             echo "::error::❌ No UUID found in provisioning profile"
#             exit 1
#           fi
#           mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
#           cp certs/Rentpedia_AppStore_2025.mobileprovision \
#             ~/Library/MobileDevice/Provisioning\ Profiles/"$PROFILE_UUID".mobileprovision
#           echo "✅ Registered profile UUID: $PROFILE_UUID"

#       - name: Verify profile registration
#         run: ls -l ~/Library/MobileDevice/Provisioning\ Profiles


#       - name: Upload decoded profile
#         uses: actions/upload-artifact@v4
#         with:
#           name: parsed-profile
#           path: parsed_profile.plist

#       - name: Check profile name and team ID
#         run: |
#           echo "🔍 Extracting profile name and team ID..."
#           plutil -extract Name raw parsed_profile.plist
#           plutil -extract TeamIdentifier raw parsed_profile.plist


#       - name: Ensure ExportOptions.plist
#         run: |
#           cat > ios/ExportOptions.plist <<EOF
#           <?xml version="1.0" encoding="UTF-8"?>
#           <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN"
#             "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
#           <plist version="1.0">
#           <dict>
#             <key>method</key><string>app-store</string>
#             <key>signingStyle</key><string>automatic</string>
#             <key>teamID</key><string>${{ secrets.APPLE_TEAM_ID }}</string>
#           </dict>
#           </plist>
#           EOF

#       - name: Build iOS (flutter) -- no-codesign
#         run: |
#           flutter build ios --release --no-codesign --verbose 2>&1 | tee flutter_build.log || {
#             echo "::error::❌ Flutter build failed"
#             tail -n200 flutter_build.log
#             exit 1
#           }

#       - name: Upload flutter build log
#         uses: actions/upload-artifact@v4
#         with:
#           name: flutter-build-log
#           path: flutter_build.log

#       - name: List available schemes
#         run: xcodebuild -list -workspace ios/Runner.xcworkspace

#       - name: Archive with Xcode
#         env:
#           DEVELOPMENT_TEAM: ${{ secrets.APPLE_TEAM_ID }}
#           OTHER_CODE_SIGN_FLAGS: "--keychain $HOME/Library/Keychains/build-temp.keychain-db"
#         run: |
#           mkdir -p build/ios/archive
#           xcodebuild \
#             -workspace ios/Runner.xcworkspace \
#             -scheme Runner \
#             -configuration Release \
#             -sdk iphoneos \
#             -archivePath build/ios/archive/Runner.xcarchive \
#             -allowProvisioningUpdates \
#             CODE_SIGN_STYLE=Automatic \
#             # CODE_SIGN_IDENTITY="Apple Distribution" \
#             DEVELOPMENT_TEAM="$DEVELOPMENT_TEAM" \
#             OTHER_CODE_SIGN_FLAGS="$OTHER_CODE_SIGN_FLAGS" \
#           2>&1 | tee xcodebuild_archive.log || {
#             echo "::error::❌ xcodebuild archive failed"
#             tail -n200 xcodebuild_archive.log
#             exit 1
#           }

#       - name: Upload xcodebuild archive log
#         uses: actions/upload-artifact@v4
#         with:
#           name: xcodebuild-archive-log
#           path: xcodebuild_archive.log

#       - name: Verify archive exists
#         run: |
#           if [ ! -d build/ios/archive/Runner.xcarchive ]; then
#             echo "::error::❌ Archive not created"
#             exit 1
#           fi

#       - name: Export .ipa from archive
#         run: |
#           mkdir -p build/ios/ipa
#           xcodebuild -exportArchive \
#             -archivePath build/ios/archive/Runner.xcarchive \
#             -exportOptionsPlist ios/ExportOptions.plist \
#             -exportPath build/ios/ipa \
#           2>&1 | tee xcodebuild_export.log || {
#             echo "::error::❌ xcodebuild export failed"
#             tail -n200 xcodebuild_export.log
#             exit 1
#           }

#       - name: List IPA folder contents
#         run: ls -l build/ios/ipa

#       - name: Upload xcodebuild export log
#         uses: actions/upload-artifact@v4
#         with:
#           name: xcodebuild-export-log
#           path: xcodebuild_export.log

#       # - name: Rename IPA to Rentpedia.ipa
#       #   run: mv build/ios/ipa/Runner.ipa build/ios/ipa/Rentpedia.ipa

#       - name: Upload signed IPA artifact
#         uses: actions/upload-artifact@v4
#         with:
#           name: signed-ios-ipa
#           path: build/ios/ipa/Rentpedia.ipa

#       - name: Verify IPA exists
#         run: |
#           if [ ! -f build/ios/ipa/Rentpedia.ipa ]; then
#             echo "::error::❌ IPA not found before upload"
#             exit 1
#           fi

#       - name: Upload to TestFlight (altool)
#         env:
#           APPLE_ID: ${{ secrets.APPLE_ID }}
#           APP_SPECIFIC_PASSWORD: ${{ secrets.APP_SPECIFIC_PASSWORD }}
#         run: |
#           xcrun altool --upload-app \
#             --type ios \
#             --file build/ios/ipa/Rentpedia.ipa \
#             --username "${{ secrets.APPLE_ID }}" \
#             --password "${{ secrets.APP_SPECIFIC_PASSWORD }}"

name: iOS Build & Upload

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-14
    timeout-minutes: 60

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🐦 Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.3'
          channel: stable
          cache: true

      - name: 📦 Dependencies
        run: |
          echo "📦 Installing dependencies..."
          flutter pub get
          brew install cocoapods
          cd ios && pod install && cd ..
          echo "✅ Dependencies installed"

      - name: 🔧 Setup Xcode
        run: |
          echo "🔧 Setting up Xcode..."
          sudo xcode-select -s /Applications/Xcode_16.1.app/Contents/Developer
          echo "✅ Xcode 16.1 selected"

      - name: 🔐 Setup Keychain
        run: |
          echo "🔐 Setting up keychain..."
          security create-keychain -p "" build-temp.keychain-db
          security unlock-keychain -p "" build-temp.keychain-db
          security import certs/Certificates.p12 -k ~/Library/Keychains/build-temp.keychain-db -P "${{ secrets.IOS_CERT_PASSWORD }}" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple-tool:codesign: -s -k "" ~/Library/Keychains/build-temp.keychain-db
          echo "✅ Keychain setup complete"

      - name: 📋 Get Certificate
        run: |
          echo "📋 Finding certificate..."
          CERT=$(security find-identity -p codesigning -v ~/Library/Keychains/build-temp.keychain-db | grep -E "(Distribution|iPhone)" | head -n1 | sed -E 's/^[[:space:]]*[0-9]+\) [A-F0-9]+ \"(.+)\".*$/\1/')
          echo "CODE_SIGN_IDENTITY=$CERT" >> $GITHUB_ENV
          echo "✅ Certificate found: $CERT"

      - name: 📱 Setup Provisioning
        run: |
          echo "📱 Setting up provisioning profile..."
          security cms -D -i certs/Rentpedia_AppStore_2025.mobileprovision > profile.plist
          UUID=$(plutil -extract UUID raw profile.plist)
          BUNDLE_ID=$(plutil -extract Entitlements.application-identifier raw profile.plist | sed 's/^[^.]*\.//')
          echo "PROFILE_UUID=$UUID" >> $GITHUB_ENV
          echo "BUNDLE_ID=$BUNDLE_ID" >> $GITHUB_ENV
          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
          cp certs/Rentpedia_AppStore_2025.mobileprovision "$HOME/Library/MobileDevice/Provisioning Profiles/${UUID}.mobileprovision"
          echo "✅ Provisioning profile setup complete"

      - name: 📝 Create Export Options
        run: |
          echo "📝 Creating export options..."
          cat > ios/ExportOptions.plist <<EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key><string>app-store</string>
            <key>signingStyle</key><string>manual</string>
            <key>teamID</key><string>${{ secrets.APPLE_TEAM_ID }}</string>
            <key>signingCertificate</key><string>${{ env.CODE_SIGN_IDENTITY }}</string>
            <key>provisioningProfiles</key>
            <dict>
              <key>${{ env.BUNDLE_ID }}</key>
              <string>${{ env.PROFILE_UUID }}</string>
            </dict>
          </dict>
          </plist>
          EOF
          echo "✅ Export options created"

      - name: 🔨 Flutter Build
        run: |
          echo "🔨 Building Flutter app..."
          flutter build ios --release --no-codesign
          echo "✅ Flutter build complete"

      - name: 📦 Archive
        run: |
          echo "📦 Creating archive..."
          xcodebuild -workspace ios/Runner.xcworkspace \
            -scheme Runner \
            -configuration Release \
            -sdk iphoneos \
            -archivePath build/ios/archive/Runner.xcarchive \
            CODE_SIGN_STYLE=Manual \
            DEVELOPMENT_TEAM="${{ secrets.APPLE_TEAM_ID }}" \
            CODE_SIGN_IDENTITY="${{ env.CODE_SIGN_IDENTITY }}" \
            PROVISIONING_PROFILE_SPECIFIER="Rentpedia_AppStore_2025" \
            OTHER_CODE_SIGN_FLAGS="--keychain $HOME/Library/Keychains/build-temp.keychain-db" \
            archive
          echo "✅ Archive created successfully"

      - name: 📱 Export IPA
        run: |
          echo "📱 Exporting IPA..."
          xcodebuild -exportArchive \
            -archivePath build/ios/archive/Runner.xcarchive \
            -exportOptionsPlist ios/ExportOptions.plist \
            -exportPath build/ios/ipa
          echo "✅ IPA exported successfully"

      - name: 🚀 Upload to App Store
        run: |
          echo "🚀 Uploading to App Store..."
          IPA_FILE=$(find build/ios/ipa -name "*.ipa" | head -n1)
          xcrun altool --upload-app \
            --type ios \
            --file "$IPA_FILE" \
            --username "${{ secrets.APPLE_ID }}" \
            --password "${{ secrets.APP_SPECIFIC_PASSWORD }}"
          echo "🎉 Upload successful! Your app is now processing in App Store Connect."

      - name: 💾 Save Artifacts (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: |
            build/ios/
            ios/ExportOptions.plist